(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['module', 'exports', 'sprintf-js'], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require('sprintf-js'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.sprintfJs);
    global.index = mod.exports;
  }
})(this, function (module, exports, _sprintfJs) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    } else {
      return Array.from(arr);
    }
  }

  exports.default = function (parameterRows) {
    var defaultGlobal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : global;


    var tests = parameterisedTests(parameterRows);

    var globalTest = defaultGlobal.test;
    var test = tests(globalTest);
    test.skip = tests(globalTest.skip);
    test.only = tests(globalTest.only);

    var globalIt = defaultGlobal.it;
    var it = tests(globalIt);
    it.skip = tests(globalIt.skip);
    it.only = tests(globalIt.only);

    var xtest = tests(defaultGlobal.xtest);
    var xit = tests(defaultGlobal.xit);
    var fit = tests(defaultGlobal.fit);

    var globalDescribe = defaultGlobal.describe;
    var describe = tests(globalDescribe);
    describe.skip = tests(globalDescribe.skip);
    describe.only = tests(globalDescribe.only);
    var fdescribe = tests(defaultGlobal.fdescribe);
    var xdescribe = tests(defaultGlobal.xdescribe);

    return { test: test, xtest: xtest, it: it, xit: xit, fit: fit, describe: describe, fdescribe: fdescribe, xdescribe: xdescribe };
  };

  var parameterisedTests = function parameterisedTests(parameterRows) {
    return function (globalCb) {
      return function (title, test) {
        parameterRows.forEach(function (params) {
          return globalCb((0, _sprintfJs.vsprintf)(title, params), applyTestParams(params, test));
        });
      };
    };
  };

  var applyTestParams = function applyTestParams(params, test) {
    if (params.length < test.length) return function (done) {
      return test.apply(undefined, _toConsumableArray(params).concat([done]));
    };

    return function () {
      return test.apply(undefined, _toConsumableArray(params));
    };
  };
  module.exports = exports['default'];
});